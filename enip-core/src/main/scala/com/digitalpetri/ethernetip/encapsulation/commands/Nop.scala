/*
 * Copyright 2014 Kevin Herron
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.digitalpetri.ethernetip.encapsulation.commands

import com.digitalpetri.ethernetip.util.Buffers
import io.netty.buffer.ByteBuf

/**
 * Either an originator or a target may send a NOP command. No reply shall be generated by this command. The data
 * portion of the command shall be from 0 to 65511 bytes long. The receiver shall ignore any data that is contained in
 * the message. A NOP command does not require that a session be established.
 */
case class Nop() extends Command(NopCode)

object Nop {

  val MaxBytes = 65511

  def encode(command: Nop, buffer: ByteBuf = Buffers.unpooled()): ByteBuf = {
    buffer
  }

  def decode(buffer: ByteBuf): Nop = {
    val size = Math.min(buffer.readableBytes(), MaxBytes)
    buffer.readBytes(size)

    Nop()
  }

}
