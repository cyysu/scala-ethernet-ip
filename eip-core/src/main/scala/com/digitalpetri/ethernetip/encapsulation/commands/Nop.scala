/*
 * EtherNet/IP
 * Copyright (C) 2014 Kevin Herron
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.digitalpetri.ethernetip.encapsulation.commands

import com.digitalpetri.ethernetip.util.Buffers
import io.netty.buffer.ByteBuf

/**
 * Either an originator or a target may send a NOP command. No reply shall be generated by this command. The data
 * portion of the command shall be from 0 to 65511 bytes long. The receiver shall ignore any data that is contained in
 * the message. A NOP command does not require that a session be established.
 */
case class Nop() extends Command(NopCode)

object Nop {

  val MaxBytes = 65511

  def encode(command: Nop, buffer: ByteBuf = Buffers.unpooled()): ByteBuf = {
    buffer
  }

  def decode(buffer: ByteBuf): Nop = {
    val size = Math.min(buffer.readableBytes(), MaxBytes)
    buffer.readBytes(size)

    Nop()
  }

}
